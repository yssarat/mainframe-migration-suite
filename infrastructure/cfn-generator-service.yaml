AWSTemplateFormatVersion: '2010-09-09'
Description: Asynchronous CloudFormation Template Generator

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment (dev or prod)
    
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda code packages
    
  LambdaTimeout:
    Type: Number
    Default: 900
    Description: Lambda function timeout in seconds
    
  LambdaMemory:
    Type: Number
    Default: 2048
    Description: Lambda function memory in MB
    
  BedrockModelId:
    Type: String
    Default: 'arn:aws:bedrock:us-east-1:663362705389:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0'
    Description: Bedrock model ARN to use for template generation
    
  ArchiveRetentionDays:
    Type: Number
    Default: 30
    Description: Number of days to retain archives

Conditions:
  CreateLambdaBucket: !Equals [!Ref LambdaCodeBucket, '']

Resources:
  # S3 Bucket for storing templates and configurations
  CFNGeneratorBucket:
    Type: AWS::S3::Bucket
    Condition: CreateLambdaBucket
    Properties:
      BucketName: !Sub cfn-generator-${Environment}-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveRule
            Status: Enabled
            Prefix: Archive/
            ExpirationInDays: !Ref ArchiveRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator
          
  # DynamoDB table for job tracking
  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub CFNGeneratorJobs-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator
          
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CFNGenerator-Lambda-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CFNGeneratorLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt JobsTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:GetExecutionHistory
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:CFNGeneratorWorkflow-${Environment}"
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0"
                  - "arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0"
                  - "arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cfn-generator/${Environment}/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mainframe-modernization/cfn-generator/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator
          
  # IAM Role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CFNGenerator-StepFunctions-Role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CFNGeneratorStepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt GeneratorLambda.Arn
                  - !GetAtt CompletionLambda.Arn
                  - !GetAtt ValidationLambda.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator
          
  # Lambda functions
  InitialLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CFNGenerator-Initial-${Environment}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !If 
          - CreateLambdaBucket
          - !Sub 'cfn-generator-${Environment}-${AWS::AccountId}-${AWS::Region}'
          - !Ref LambdaCodeBucket
        S3Key: lambda/initial-lambda.zip
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          STATE_MACHINE_ARN: !Ref CFNGeneratorStateMachine
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator
          
  # Resource-based permission for Initial Lambda to allow Bedrock agent invocation
  InitialLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref InitialLambda
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  StatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CFNGenerator-Status-${Environment}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !If 
          - CreateLambdaBucket
          - !Sub 'cfn-generator-${Environment}-${AWS::AccountId}-${AWS::Region}'
          - !Ref LambdaCodeBucket
        S3Key: lambda/status-lambda.zip
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator
          
  # Resource-based permission for Status Lambda to allow Bedrock agent invocation
  StatusLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StatusLambda
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  GeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CFNGenerator-Generator-${Environment}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !If 
          - CreateLambdaBucket
          - !Sub 'cfn-generator-${Environment}-${AWS::AccountId}-${AWS::Region}'
          - !Ref LambdaCodeBucket
        S3Key: lambda/generator-lambda.zip
      Runtime: python3.13
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          PROMPT_PARAMETER_NAME: !Sub /cfn-generator/${Environment}/template-prompt
          ARCHIVE_FOLDER: Archive
          IAC_FOLDER: IaC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator

  CompletionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CFNGenerator-Completion-${Environment}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !If 
          - CreateLambdaBucket
          - !Sub 'cfn-generator-${Environment}-${AWS::AccountId}-${AWS::Region}'
          - !Ref LambdaCodeBucket
        S3Key: lambda/completion-lambda.zip
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator

  ValidationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CFNGenerator-Validation-${Environment}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !If 
          - CreateLambdaBucket
          - !Sub 'cfn-generator-${Environment}-${AWS::AccountId}-${AWS::Region}'
          - !Ref LambdaCodeBucket
        S3Key: lambda/validation-lambda.zip
      Runtime: python3.13
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          PROMPT_PARAMETER_NAME: !Sub /cfn-generator/${Environment}/template-prompt
          ARCHIVE_FOLDER: Archive
          IAC_FOLDER: IaC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator

  # Step Functions State Machine
  CFNGeneratorStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub CFNGeneratorWorkflow-${Environment}
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "State machine for asynchronous CloudFormation template generation",
          "StartAt": "GenerateTemplate",
          "States": {
            "GenerateTemplate": {
              "Type": "Task",
              "Resource": "${GeneratorLambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "bucket_name.$": "$.bucket_name",
                "s3_folder.$": "$.s3_folder"
              },
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed", "States.Timeout"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ],
              "Next": "ValidateTemplate"
            },
            "ValidateTemplate": {
              "Type": "Task",
              "Resource": "${ValidationLambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "s3_location.$": "$.s3_location",
                "perform_changeset_validation": true
              },
              "ResultPath": "$.validation_result",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed", "States.Timeout", "ThrottlingException"],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 5,
                  "BackoffRate": 2
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleValidationError"
                }
              ],
              "Next": "CheckValidationResult"
            },
            "CheckValidationResult": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.validation_result.validation_status",
                  "StringEquals": "FAILED",
                  "Next": "HandleValidationFailure"
                }
              ],
              "Default": "CompleteJob"
            },
            "HandleValidationFailure": {
              "Type": "Task",
              "Resource": "${CompletionLambda.Arn}",
              "Parameters": {
                "job_id.$": "$.validation_result.job_id",
                "status": "VALIDATION_FAILED",
                "error.$": "$.validation_result.validation_errors",
                "s3_location.$": "$.validation_result.s3_location"
              },
              "End": true
            },
            "CompleteJob": {
              "Type": "Task",
              "Resource": "${CompletionLambda.Arn}",
              "Parameters": {
                "job_id.$": "$.validation_result.job_id",
                "status": "VALIDATED",
                "message": "Template validation successful",
                "s3_location.$": "$.validation_result.s3_location",
                "zip_location.$": "$.zip_location",
                "config_zip_location.$": "$.config_zip_location"
              },
              "ResultPath": "$.completion_result",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed", "States.Timeout"],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 2,
                  "BackoffRate": 2
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.error",
                  "Next": "HandleError"
                }
              ],
              "End": true
            },
            "HandleError": {
              "Type": "Task",
              "Resource": "${CompletionLambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "status": "ERROR",
                "error.$": "$.error",
                "s3_location.$": "$.s3_location"
              },
              "End": true
            },
            "HandleValidationError": {
              "Type": "Task",
              "Resource": "${CompletionLambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "status": "VALIDATION_ERROR",
                "error.$": "$.error"
              },
              "End": true
            }
          }
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: CFNGenerator

  # SSM Parameter for template prompt
  TemplatePromptParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /cfn-generator/${Environment}/template-prompt
      Type: String
      Value: |
        You are an AWS Solutions Architect. Create a CloudFormation template for the AWS resources in S3 bucket: {s3_bucket}, folder: {s3_folder}.
        The S3 folder contains resource configurations in JSON format: {s3_contents_json}

        Requirements:
        1. Create a CloudFormation template with all necessary resources
        2. Ensure proper dependencies and references
        3. Include required IAM roles with least privilege
        4. Follow security best practices
        5. Add appropriate resource tags
        6. Make the template syntactically correct
        7. Avoid circular dependencies

        Output a YAML CloudFormation template with:
        - Parameters section
        - Resources section
        - Outputs section
      Tags:
        Environment: !Ref Environment
        Service: CFNGenerator

Outputs:
  CFNGeneratorBucketName:
    Condition: CreateLambdaBucket
    Description: S3 bucket for storing templates and configurations
    Value: !Ref CFNGeneratorBucket
    
  JobsTableName:
    Description: DynamoDB table for job tracking
    Value: !Ref JobsTable
    
  InitialLambdaArn:
    Description: Initial Lambda function ARN
    Value: !GetAtt InitialLambda.Arn
    
  StatusLambdaArn:
    Description: Status Lambda function ARN
    Value: !GetAtt StatusLambda.Arn
    
  StateMachineArn:
    Description: Step Functions state machine ARN
    Value: !Ref CFNGeneratorStateMachine
