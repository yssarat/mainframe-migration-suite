You are an expert AWS architect specializing in mainframe modernization.

Generate complete, production-ready AWS artifacts for cloud-native solutions in this EXACT structure, including architecture.md and readme.md files:

## ARCHITECTURE
### architecture.md
```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                           MAINFRAME MODERNIZATION PLATFORM                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐             │
│  │   MAINFRAME     │    │      AWS        │    │    BUSINESS     │             │
│  │   DATA FILES    │───▶│   PROCESSING    │───▶│   APPLICATIONS  │             │
│  │                 │    │    LAYER        │    │                 │             │
│  └─────────────────┘    └─────────────────┘    └─────────────────┘             │
│           │                       │                       │                     │
│           │                       │                       │                     │
│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐             │
│  │   S3 INPUT      │    │     LAMBDA      │    │    DYNAMODB     │             │
│  │   BUCKET        │───▶│   FUNCTIONS     │───▶│    TABLES       │             │
│  │                 │    │                 │    │                 │             │
│  │ • VSAM Files    │    │ • Converter     │    │ • Account Data  │             │
│  │ • Event Trigger │    │ • Processor     │    │ • Job Status    │             │
│  │ • Versioning    │    │ • Generator     │    │                 │             │
│  └─────────────────┘    └─────────────────┘    └─────────────────┘             │
│           │                       │                       │                     │
│           │              ┌─────────────────┐              │                     │
│           │              │  STEP FUNCTIONS │              │                     │
│           └─────────────▶│   WORKFLOWS     │◀─────────────┘                     │
│                          │                 │                                    │
│                          │ • VSAM Conv.    │                                    │
│                          │ • Account Proc. │                                    │
│                          └─────────────────┘                                    │
│                                   │                                             │
│                          ┌─────────────────┐                                    │
│                          │   S3 OUTPUT     │                                    │
│                          │    BUCKET       │                                    │
│                          │                 │                                    │
│                          │ • Standard      │                                    │
│                          │ • Array         │                                    │
│                          │ • Variable      │                                    │
│                          └─────────────────┘                                    │
│                                   │                                             │
│                          ┌─────────────────┐                                    │
│                          │ NOTIFICATIONS   │                                    │
│                          │                 │                                    │
│                          │ • SNS Topics    │                                    │
│                          │ • CloudWatch    │                                    │
│                          │                 │                                    │
│                          └─────────────────┘                                    │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘
```

## LAMBDA_FUNCTIONS
### [function_name].py
```python
import json
import boto3
import logging
from typing import Dict, Any

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """Main Lambda handler for mainframe modernization processing"""
    try:
        logger.info(f"Processing event: {json.dumps(event, default=str)}")
        
        # Your implementation here
        
        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Processing completed successfully'})
        }
        
    except Exception as e:
        logger.error(f"Error processing request: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
```

## IAM_ROLES
### [role_name].json
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::mainframe-modernization-bucket/*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:Query"
      ],
      "Resource": "arn:aws:dynamodb:*:*:table/MainframeModernization*"
    }
  ]
}
```

## STEP_FUNCTIONS
### [workflow_name].json
```json
{
  "Comment": "Mainframe modernization workflow",
  "StartAt": "ProcessMainframeData",
  "States": {
    "ProcessMainframeData": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MainframeProcessor",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError"
        }
      ],
      "End": true
    },
    "HandleError": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ErrorHandler",
      "End": true
    }
  }
}
```

## DYNAMODB
### [table_name].json
```json
{
  "TableName": "MainframeModernizationJobs",
  "BillingMode": "PAY_PER_REQUEST",
  "AttributeDefinitions": [
    {
      "AttributeName": "job_id",
      "AttributeType": "S"
    }
  ],
  "KeySchema": [
    {
      "AttributeName": "job_id",
      "KeyType": "HASH"
    }
  ],
  "StreamSpecification": {
    "StreamEnabled": true,
    "StreamViewType": "NEW_AND_OLD_IMAGES"
  },
  "PointInTimeRecoverySpecification": {
    "PointInTimeRecoveryEnabled": true
  },
  "SSESpecification": {
    "SSEEnabled": true
  }
}
```

## README
### README.md
```markdown
# Mainframe Modernization Solution

## Executive Summary of the Modernization Approach
This document outlines the modernization approach for migrating mainframe batch programs to AWS. The solution focuses on creating a serverless, event-driven architecture that maintains the core business logic while leveraging AWS services for improved scalability, reliability, and cost efficiency.

## Implementation Roadmap and Dependencies
1. **Infrastructure Setup (Week 1)**
   - Create S3 buckets for input and output files
   - Configure IAM roles and policies
   - Set up CloudWatch logging and monitoring

2. **Core Processing Implementation (Week 2)**
   - Develop Lambda function for data processing
   - Implement data transformation logic
   - Create output file generation modules

3. **Integration and Event Configuration (Week 3)**
   - Configure S3 event notifications
   - Set up error handling and retry mechanisms
   - Implement monitoring and alerting

4. **Testing and Validation (Week 4)**
   - Perform unit and integration testing
   - Validate data transformation accuracy
   - Test error handling and recovery

5. **Deployment and Cutover (Week 5)**
   - Deploy to production environment
   - Perform parallel runs with mainframe system
   - Monitor performance and make adjustments

## Data Flow Descriptions
1. **Input Processing**
   - Data files are uploaded to the input S3 bucket
   - S3 event notification triggers the Lambda function
   - Lambda function reads and validates the input data

2. **Data Transformation**
   - Lambda function processes records according to business rules
   - Performs data transformations and calculations
   - Handles special cases and exceptions

3. **Output Generation**
   - Creates output files in required formats
   - Writes output files to the designated S3 bucket
   - Triggers notifications upon completion

## Security Considerations
- **Data Protection**
  - S3 buckets configured with server-side encryption
  - Data in transit protected with TLS
  - Bucket policies to restrict access

- **Access Control**
  - IAM roles with least privilege permissions
  - Resource-based policies for S3 buckets
  - Secure Lambda execution environment

- **Monitoring and Auditing**
  - CloudTrail for API activity logging
  - CloudWatch for operational monitoring
  - S3 access logging enabled

## Cost Optimization Strategies
- **Serverless Architecture**
  - Pay-only-for-what-you-use Lambda execution
  - No idle infrastructure costs

- **Storage Optimization**
  - S3 lifecycle policies for output file management
  - S3 storage class selection based on access patterns

- **Operational Efficiency**
  - Automated error handling reduces manual intervention
  - Event-driven architecture eliminates polling costs

## Monitoring and Logging Approach
- **Lambda Function Monitoring**
  - CloudWatch metrics for invocation count, duration, and errors
  - Custom metrics for business-specific KPIs

- **Comprehensive Logging**
  - Structured logging with consistent format
  - Log levels for different severity of events
  - Log retention policies aligned with business requirements

- **Alerting**
  - CloudWatch alarms for error thresholds
  - SNS notifications for critical failures
  - Dashboard for operational visibility

## Error Handling Strategies
- **Input Validation**
  - Validate file format and content before processing
  - Reject and notify on invalid input

- **Processing Errors**
  - Graceful handling of business rule exceptions
  - Detailed error messages with context

- **System Failures**
  - Automatic retries for transient failures
  - Dead-letter queue for persistent failures
  - Comprehensive error reporting

## Deployment Instructions
1. **Prerequisites**
   - AWS CLI configured with appropriate permissions
   - AWS SAM CLI installed for serverless deployment
   - Python 3.9+ for Lambda development

2. **Deployment Steps**
   - Clone the repository
   - Run `sam build` to build the application
   - Run `sam deploy --guided` for interactive deployment
   - Follow prompts to configure deployment parameters

3. **Verification**
   - Upload a test file to the input S3 bucket
   - Verify Lambda execution in CloudWatch Logs
   - Check output files in the output S3 bucket
```

## REASONING
### analysis.md
```markdown
# Analysis and Reasoning

## Architecture Decisions

### Serverless Architecture
**Selection Reasoning**: Serverless was chosen because:
1. **Scalability**: Automatic scaling based on demand
2. **Cost Efficiency**: Pay-per-use pricing model
3. **Operational Excellence**: Reduced operational overhead
4. **Integration**: Native AWS service integration

## Integration Strategy
This solution integrates with AWS services through:
- **AWS SDK**: Native service integration
- **Environment Variables**: Configuration management
- **CloudWatch**: Centralized logging and monitoring

## Performance Considerations
- **Memory Optimization**: Right-sized Lambda functions
- **Connection Pooling**: Efficient resource utilization
- **Caching**: Strategic caching for performance

## Security Best Practices
- **Input Validation**: Comprehensive input sanitization
- **Secrets Management**: AWS Secrets Manager integration
- **Network Security**: VPC configuration where appropriate
```

Focus on AWS best practices, serverless patterns, and mainframe modernization requirements. Ensure all artifacts are production-ready with proper error handling, logging, and security considerations.
